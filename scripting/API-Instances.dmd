```set title
Instance functions in NTT
```
#[Management]() {
	#[instance_create(x, y, obj, ?var_struct)->]() {
		GMS1-style, picks depth based on [object_get_depth] with depths set in project.
	}
	```gmblanks
	instance_create_depth(x, y, depth, obj, ?var_struct)->
	instance_create_layer(x, y, layer, obj, ?var_struct)->
	instance_destroy(?inst, ?perform_destroy)
	instance_exists(obj):
	```
	#[instance_is(instance, object)->]() {
		Returns whether an instance belongs to the given object type.
		
		This is equivalent to
		```
		object_index == obj || object_is_ancestor(object_index, obj)
		```
	}
	---
	```gmblanks
	instance_change(new_object_type, perform_events)->
	instance_copy(perform_events)->
	```
}
#[Objects]() {
	```gmblanks
	object_exists(object):
	object_get_name(object):
	object_get_sprite(object):
	object_get_solid(object):
	object_get_visible(object):
	object_get_persistent(object):
	object_get_mask(object):
	object_get_parent(object):
	object_is_ancestor(child, parent):
	```
	Non-standard:
	#[object_get_depth(object)->]() {
		Returns the depth that [instance_create] would put instances of the object on.
	}
	#[object_has_event(object, event_type, event_number)->]() {
		Returns whether an object has a specific event.
	}
}
#[Searching]() {
	```gmblanks
	instance_number(obj):
	instance_find(obj, n)
	instance_nearest(x, y, object):
	instance_furthest(x, y, object):
	```
	#[instance_nearest_nonself(x, y, object)->]() {
		Like the regular `instance_nearest`,
		but will not return the instance calling the function.
	}
	#[instance_nearest_from(x, y, array_of_instances)->]() {
		Like `instance_nearest`, but takes an array of instances
	}
	#[instance_nearest_bbox(x, y, obj_or_array)->]() {
		Like `instance_nearest`, but measures distance with `distance_to_point`.
	}
}
#[Events]() {
	Alarms:
	```gmblanks
	:alarm_get(index):
	:alarm_set(index, value)
	```
	#[alarm_run(index)->]() {
		Ticks down the specified alarm if it is set,
		and returns whether it's time to trigger the effect.
		
		$[src]
	}
	---
	#[event_perform(etype, enumb)]() {
		Be careful!
		
		$[manual]
	}
	#[event_perform_object(object, etype, enumb)]() {
		Also be careful - executing other objects' events may leak
		variables into the current instance.
		
		$[manual]
	}
	```gmblanks
	::event_perform(etype, enumb)
	::event_perform_object(object, etype, enumb)
	```
}
#[Filtering]() {
	Intended for narrowing down instances to the one's you'd like.
	#[instances_matching(object_or_array, varname, ...values)->]() {
		Returns an array of instances that have varname equal to any of values.
	}
	#[instances_matching_ne(object_or_array, varname, ...values)->]() {
		Returns an array of instances that have varname not equal to any of values
	}
	#[instances_matching_lt(object_or_array, varname, value)->]() {
		Returns an array of instances that have varname numeric and < the set threshold
	}
	#[instances_matching_gt(object_or_array, varname, value)->]() {
		Returns an array of instances that have varname numeric and > the set threshold
	}
	#[instances_matching_le(object_or_array, varname, value)->]() {
		Returns an array of instances that have varname numeric and <= the set threshold
	}
	#[instances_matching_ge(object_or_array, varname, value)->]() {
		Returns an array of instances that have varname numeric and >= the set threshold
	}
	#[instances_matching_range(object_or_array, varname, minValue, maxValue, minValueIsInclusive, maxValueIsInclusive)->]() {
		Returns an array of instances that have varname numeric and within the range
	}
	---
	#[instances_in_rectangle(object_or_array, x1, y1, x2, y2)->]() {
		Returns an array of instances with their XY within rectangle
	}
	#[instances_in_circle(object_or_array, x, y, rad)->]() {
		Returns an array of instances with their XY within circle
	}
}