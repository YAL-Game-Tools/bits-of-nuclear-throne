```set template dmd-templates/scripting.html```
```set tag:defcode gml```
```set tag:gml:live 1```
```set autoapi ext```
```gmlapi fnames2```
```set navmenu1 1```
```exec
function ref(name) {
	var label, target;
	var pos = name.indexOf("@");
	if (pos >= 0) {
		label = StringTools.trim(name.substring(0, pos));
		target = StringTools.trim(name.substring(pos + 1));
	} else {
		target = label = name;
	}
	var repo = "https://github.com/YAL-Game-Tools/bits-of-nuclear-throne";
	target = repo + "/blob/main/ref/" + target + ".gml";
	return render("[" + label + "](+" + target + ")");
}
function src(?name) {
	if (name == null || name == "") {
		var st = DocMd.sectionStack;
		name = st[st.length - 1].permalink;
	}
	return render("*Source:* ") + ref(name);
}
function gmHelpLink(name) {
	return "https://manual.gamemaker.io/monthly/en/index.htm"
		+ "#rhsearch=" + name + "&ux=search";
}
function manual(?name) {
	if (name == null || name == "") {
		var st = DocMd.sectionStack;
		name = st[st.length - 1].permalink;
		return render("*GM help:* ") + manual(name);
	}
	return render("[" + name + "](+" + gmHelpLink(name) + ")");
}
function nonSync(?kinds) {
	if (kinds == null) kinds = "vf";
	var funcs = kinds.indexOf("f") >= 0;
	var vars = kinds.indexOf("v") >= 0;
	var unique = kinds.indexOf("u") >= 0;
	var what;
	if (funcs && vars) {
		what = "variables and functions";
	} else if (funcs) {
		what = "functions";
	} else if (vars) {
		what = "variables";
	} else what = "";
	var md = "The following " + what;
	if (!unique) {
		md += " are the same as their non-suffixed counterparts, but";
	}
	md += " aren't subject to synchronization/network latency,"
		+ " thus should only be used for display,"
		+ " else you may cause a desync.";
	return render(md) + " " + seeSync();
}
function seeSync() {
	return render("See [Sync](./NTT-Sync.html) for more information.");
}
var rxSigEsc = new EReg("([\\[\\]\\*])", "g");
function printBlanks(text, isGM) {
	text = StringTools.trim(text);
	var lines = text.split("\n");
	var out = [];
	var rxName = new EReg("^(\\w+)", "");
	for (sig in lines) {
		sig = StringTools.trim(sig);
		if (sig == "") {
			out.push("---");
			continue;
		}
		if (StringTools.startsWith(sig, "//")) continue;
		sig = StringTools.replace(sig, "$", "");
		sig = StringTools.replace(sig, "Â£", "");
		if (sig.indexOf("(") >= 0 && StringTools.endsWith(sig, "#")) {
			sig = sig.substring(0, sig.length - 1);
		}
		while (StringTools.startsWith(sig, ":")) {
			sig = sig.substring(1);
		}
		if (StringTools.endsWith(sig, ":")) {
			sig = sig.substring(0, sig.length - 1) + "->";
		}
		var sigMd = rxSigEsc.replace(sig, "\\$1");
		var md = "#[" + sigMd + "] {}";
		if (isGM && rxName.match(sig)) {
			var name = rxName.matched(1);
			if (StringTools.startsWith(name, "native_")) {
				name = name.substring("native_".length);
			}
			var url = gmHelpLink(name);
			//md = "[" + md + "](" + url + ")";
			md = "#[" + sigMd + "](" + url + ") {}";
		}
		out.push(md);
		//out.push("#[" + sig + "] {}");
	}
	return render(out.join("\n"));
}
DocMd.addCodeTag("blanks", function(text) {
	return printBlanks(text, false);
});
DocMd.addCodeTag("ntblanks", function(text) {
	return printBlanks(text, false);
});
DocMd.addCodeTag("gmblanks", function(text) {
	return printBlanks(text, true);
});
DocMd.addCodeTag("gmdump", function(text) {
	var rxFirst = new EReg("^\\s*(.+)", "");
	var title = "Entries";
	if (rxFirst.match(text)) {
		title = rxFirst.matched(1);
		text = rxFirst.matchedRight();
	}
	text = StringTools.trim(text).split("\n").map(function(line) {
		return StringTools.trim(line);
	}).join("\n");
	text = StringTools.htmlEscape(text);
	var html = '<details>'
		+ '<summary>' + render(title) + '</summary>'
		+ '<pre class="dump">' + text + '</pre>'
	+ '</details>';
	return html;
});
DocMd.addCodeTag("table", function(str) {
	str = StringTools.trim(str);
	var lines = str.split("\n");
	var first = lines.shift();
	first = "<tr><th>" + first.split("|").join("</th><th>") + "</th></tr>";
	lines = lines.map(function(line) {
		var cells = line.split("|");
		cells = cells.map(function(cell) {
			return render(cell);
		});
		return "<tr><td>" + cells.join("</td><td>") + "</td></tr>";
	});
	lines.unshift(first);
	return "<table>" + lines.join("\n") + "</table>";
});
function fullWidth() {
	return '<style>
.page {
	max-width: 100%;
}
table th {
	text-align: left;
}
</style>';
}
```
